{"version":3,"sources":["Constants.js","Util.js","Action.js","Event.js","Schedule.js","Status.js","Game.js","GameContext.js","component/GameInfo.jsx","component/Keyword.js","component/ActionArea.jsx","component/Board.jsx","App.js","reportWebVitals.js","index.js"],"names":["STATIC_ROOT","DrawCard","G","ctx","hand","length","deck","discard","push","pop","BaseAction","displayName","image","description","moneyCost","energyCost","producesGrowthMindset","producesMoney","producesAttention","producesEnergy","drawsCards","discardsCards","gainsCards","forgetsOnDiscard","forgetsSelf","forgetsCards","perform","energy","growthMindsetPoints","Math","min","this","money","attention","i","cardsLeftToDiscard","events","setStage","cardsLeftToForget","forEach","c","buy","id","Actions","map","reduce","rv","x","BaseEvent","producesStatuses","addsCardsToShop","addsCardsToDiscard","options","apply","Object","entries","stat","duration","statuses","max","card","actionShop","Events","Schedule","eventsByDay","turnNumber","eventId","BaseStatus","Statuses","INITIAL_BOARD","sort","currentEvent","backgroundImage","schedule","1","3","STARTS_TURN_WITH","Apex2021","setup","setupData","moves","performAction","handIndex","actionId","action","INVALID_MOVE","splice","buyAction","shopIndex","endTurn","turn","activePlayers","all","onBegin","getEvents","endStage","remainingCard","cardsToDraw","assign","dur","console","log","SetupNewTurn","onEnd","endGame","stages","showEvent","chooseOption","optionIndex","dismiss","discardAction","forget","forgetAction","GameContext","React","createContext","GROWTH_MINDSET_COLOR","0","2","4","5","GameInfo","useContext","Table","responsive","bordered","className","Badge","variant","ProgressBar","now","toPrecision","label","animated","CardOrCards","number","Description","props","runEffect","passthrough","useEffect","Tooltip","Keyword","value","tooltipClassName","OverlayTrigger","placement","overlay","descriptionProps","Discard","Draw","Forget","ForgetSelf","Gain","cardId","renderCard","onClick","s","BoostGrowthMindset","YOLO","ActionCard","useState","isSelected","setIsSelected","slotId","ref","isDiscard","playOrderPos","isForget","runHolder","Card","onMouseEnter","onMouseLeave","bg","border","Header","Container","fluid","Row","Col","xs","Body","Title","Img","src","ListGroup","Item","Text","Footer","ActionList","actions","actionCards","CardColumns","ActionArea","noop","actionData","tab","setTab","tabs","keys","areaType","Tab","eventKey","title","Tabs","activeKey","onSelect","k","Button","EventModal","show","onHide","ev","styles","backgroundRepeat","backgroundSize","Modal","size","style","centered","Loading","count","total","percent","startGame","Board","isLoading","setIsLoading","assetsToLoad","assets","values","Assets","useReducer","state","type","Error","loadingState","dispatch","preload","a","Promise","resolve","reject","img","Image","onload","onerror","promises","Provider","GameClient","Client","game","board","numPlayers","App","exact","strict","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.64e47bda.chunk.js","sourcesContent":["export const MAX_HAND_SIZE = 8;\nexport const MAX_GROWTH_MINDSET = 5;\nexport const STATIC_ROOT = \"/apex2021/\";\n","import { MAX_HAND_SIZE } from \"./Constants\";\n\n// A weighted set of outcomes.\n// The key represents the lowest roll of a 20-sided dice that will result in that outcome.\n// Example: {\n//  0: [], // 50%\n//  10: [BadEvent], // 45%\n//  19: [CatastrophicEvent], // 5%\n// }\n//\n// Generate no events by default.\nexport const RollOutcome = function(roll, weightedOutcomes) {\n  const threshold = roll - 1;\n\tconst rollIndices = Object.keys(weightedOutcomes).map(k => parseInt(k));\n  const selectedIndex = rollIndices.find(k => threshold >= k);\n\treturn weightedOutcomes[\"\" + selectedIndex];\n};\n\nexport const DrawCard = function(G, ctx) {\n  if (G.hand.length >= MAX_HAND_SIZE) {\n    return false;\n  }\n  if (G.deck.length <= 0) {\n    while (G.discard.length > 0) {\n      G.deck.push(G.discard.pop());\n    }\n  }\n  // If the deck is still empty, no draw.\n  if (G.deck.length <= 0) {\n    return false;\n  }\n  G.hand.push(G.deck.pop());\n  return true;\n}\n","import { MAX_GROWTH_MINDSET } from './Constants';\nimport { DrawCard } from './Util';\n\n\nexport const BaseAction = {\n  displayName: null,\n  image: null,\n  description: \"<FLAVOR>\",\n  moneyCost: 0,\n  energyCost: 0,\n  producesGrowthMindset: 0,\n  producesMoney: 0,\n  producesAttention: 0,\n  producesEnergy: 0,\n  drawsCards: 0,\n  discardsCards: 0,\n  gainsCards: [],\n  forgetsOnDiscard: false,\n  forgetsSelf: false,\n  forgetsCards: 0,\n  // TODO: This is \"inheritance\" without any protection. Bad idea.\n  perform: function(G, ctx) {\n    // First check if we can afford the move.\n    if (G.energy <= 0) {\n      return false;\n    }\n    // Pay for the action.\n    G.energy--;\n    G.growthMindsetPoints = Math.min(MAX_GROWTH_MINDSET, G.growthMindsetPoints + this.producesGrowthMindset);\n    G.money += this.producesMoney;\n    G.attention += this.producesAttention;\n    G.energy += this.producesEnergy;\n    for (let i = 0; i < this.drawsCards; i++) {\n      DrawCard(G, ctx);\n    }\n    if (this.discardsCards > 0 && G.hand.length > 0) {\n      G.cardsLeftToDiscard = this.discardsCards;\n      ctx.events.setStage('discard');\n    }\n    if (this.forgetsCards > 0 && G.hand.length > 0) {\n      G.cardsLeftToForget = this.forgetsCards;\n      ctx.events.setStage('forget');\n    }\n    this.gainsCards.forEach((c) => G.discard.push(c));\n    return true;\n  },\n  buy: function(G, ctx) {\n    if (G.attention <= 0 || G.money < this.moneyCost || G.energy < this.energyCost) {\n      return false;\n    }\n    // Pay for the action.\n    G.attention--;\n    G.money -= this.moneyCost;\n    G.energy -= this.energyCost;\n    G.discard.push(this.id);\n    return true;\n  },\n};\n\nconst actionList = [\n  {\n    id: \"Card01\",\n    displayName: \"Card1\",\n    description: \"Make sure to play this every turn!\",\n    producesGrowthMindset: 1,\n  },\n  {\n    id: \"Card02\",\n    displayName: \"Card2\",\n    description: \"Getting money lets you buy stuff.\",\n    producesMoney: 1,\n    producesEnergy: 1,\n  },\n  {\n    id: \"Card03\",\n    displayName: \"Card3\",\n    description: \"Sometimes you just want to forget everything.\",\n    moneyCost: 2,\n    forgetsSelf: true,\n    forgetsCards: 99,\n  },\n  {\n    id: \"Card04\",\n    displayName: \"Card4\",\n    description: \"If you play this, you'll have to pick another card in your hand to discard.\",\n    moneyCost: 2,\n    drawsCards: 3,\n    discardsCards: 1,\n  },\n  {\n    id: \"Card05\",\n    displayName: \"Card5\",\n    description: \"Doing too much can make you tired.\",\n    moneyCost: 2,\n    producesGrowthMindset: 1,\n    producesMoney: 1,\n    producesEnergy: 1,\n    drawsCards: 1,\n    gainsCards: [\"fatigue\"],\n  },\n  {\n    id: \"Card06\",\n    displayName: \"Card6\",\n    description: \"More energy means you can play more actions!\",\n    moneyCost: 3,\n    producesEnergy: 2,\n    drawsCards: 1,\n  },\n  {\n    id: \"Card07\",\n    displayName: \"Card7\",\n    description: \"IDK\",\n    moneyCost: 3,\n  },\n  {\n    id: \"Card08\",\n    displayName: \"Card8\",\n    description: \"IDK\",\n    moneyCost: 4,\n  },\n  {\n    id: \"Card09\",\n    displayName: \"Card9\",\n    description: \"More money\",\n    moneyCost: 4,\n    producesMoney: 2,\n    producesEnergy: 1,\n  },\n  {\n    id: \"Card10\",\n    displayName: \"Card10\",\n    description: \"That's a lot of energy.\",\n    moneyCost: 4,\n    producesAttention: 1,\n    producesEnergy: 4,\n  },\n  {\n    id: \"Card11\",\n    displayName: \"Card11\",\n    description: \"Maybe there are better options.\",\n    moneyCost: 5,\n    producesEnergy: 1,\n    drawsCards: 2,\n  },\n  {\n    id: \"Card12\",\n    displayName: \"Card12\",\n    description: \"More more money\",\n    moneyCost: 6,\n    producesMoney: 3,\n    producesEnergy: 1,\n  },\n  {\n    id: \"fatigue\",\n    displayName: \"Fatigue\",\n    description: \"Better rest up or I'll just get even more tired later.\",\n    forgetsSelf: true,\n  },\n  {\n    id: \"summerHomework\",\n    displayName: \"Summer Homework\",\n    description: \"So tedious...\",\n    producesGrowthMindset: 1,\n    forgetsSelf: true,\n    forgetsOnDiscard: true,\n  },\n].map(c => ({\n  ...BaseAction,\n  ...c,\n}));\n\nconst Actions = actionList.reduce(function(rv, x) {\n  rv[x.id] = x;\n  return rv;\n}, {});\n\nexport default Actions;\n","import {\n  STATIC_ROOT\n} from \"./Constants\";\n\nexport const BaseEvent = {\n  displayName: null,\n  image: null,\n  description: \"<FLAVOR>\",\n  producesStatuses: {},\n  addsCardsToShop: [],\n  addsCardsToDiscard: [],\n  options: {},\n  apply: function(G, ctx) {\n    // TBD: Events can potentially have choices that spawn other events later.\n    for (let [stat, duration] of Object.entries(this.producesStatuses)) {\n      G.statuses[stat] = Math.max((G.statuses[stat] || 0), duration);\n    }\n    for (let card of this.addsCardsToShop) {\n      G.actionShop.push(card);\n    }\n    for (let card of this.addsCardsToDiscard) {\n      G.discard.push(card);\n    }\n  }\n};\n\nconst eventList = [\n  {\n    id: \"SummerStart\",\n    image: `${STATIC_ROOT}middle_school_graduation.png`,\n    displayName: \"Congratulations\",\n    description: \"After a long year, you've finally graduated from middle school.\",\n    producesStatuses: {\n      \"inspired\": 2, // No growth mindset lost.\n      \"energized\": 2, // One extra energy per turn.\n    },\n    addsCardsToDiscard: [\n      \"summerHomework\",\n      \"summerHomework\",\n      \"Card01\",\n    ],\n  },\n  {\n    id: \"SchoolStart\",\n    displayName: \"High School Begins\",\n    description: \"And just like that High School begins.\",\n    image: `${STATIC_ROOT}welcome_back.png`,\n    addsCardsToDiscard: [\n      \"Card02\",\n      \"Card02\",\n      \"Card02\",\n      \"Card02\",\n      \"Card02\",\n      \"Card01\",\n      \"Card01\",\n    ],\n    addsCardsToShop: [\n      \"Card02\",\n      \"Card02\",\n      \"Card04\",\n      \"Card05\",\n    ],\n  },\n].map(c => ({\n  ...BaseEvent,\n  ...c,\n}));\n\nconst Events = eventList.reduce(function(rv, x) {\n  rv[x.id] = x;\n  return rv;\n}, {});\n\nexport default Events;\n","export class Schedule {\n  eventsByDay:object;\n\n  constructor(eventsByDay: object) {\n    this.eventsByDay = eventsByDay || {};\n  }\n\n  addEvent(turnNumber: number, eventId: string):void {\n    if (!(turnNumber in this.eventsByDay)) {\n      this.eventsByDay[turnNumber] = [];\n    }\n    this.eventsByDay[turnNumber].push(eventId);\n  }\n\n  getEvents(turnNumber: number):Array<string> {\n    if (turnNumber in this.eventsByDay) {\n      return this.eventsByDay[turnNumber]\n    }\n    return [];\n  }\n}\n\nexport default Schedule;\n","import { MAX_GROWTH_MINDSET } from \"./Constants\";\n\nexport const BaseStatus = {\n  displayName: null,\n  image: null,\n  description: \"<FLAVOR>\",\n  apply: function(G, ctx) { }\n};\n\nconst statusList = [\n  {\n    id: \"energized\",\n    displayName: \"Energized\",\n    description: \"Gain an extra energy at the start of each turn.\",\n    apply: function(G, ctx) {\n      G.energy += 1;\n    },\n  },\n  {\n    id: \"inspired\",\n    displayName: \"Inspired\",\n    description: \"Nullify the usual loss of growth mindset at the start of each turn.\",\n    apply: function(G, ctx) {\n      G.growthMindsetPoints = Math.min(MAX_GROWTH_MINDSET, G.growthMindsetPoints + 1);\n    },\n  },\n].map(c => ({\n  ...BaseStatus,\n  ...c,\n}));\n\nconst Statuses = statusList.reduce(function(rv, x) {\n  rv[x.id] = x;\n  return rv;\n}, {});\n\nexport default Statuses;\n","import { INVALID_MOVE } from 'boardgame.io/core';\n\nimport Actions from './Action';\nimport Events from './Event';\nimport Schedule from './Schedule';\nimport Statuses from './Status';\n\nimport {\n  DrawCard\n} from './Util';\n\nconst INITIAL_SCHEDULE = {\n  1: [\"SummerStart\"],\n  3: [\"SchoolStart\"],\n};\n\nconst INITIAL_BOARD = {\n  actionShop: [\n    /*\n    ...Array(2).fill(\"Card02\"),\n    ...Array(1).fill(\"Card06\"),\n    ...Array(2).fill(\"Card09\"),\n    ...Array(1).fill(\"Card10\"),\n    ...Array(1).fill(\"Card12\"),\n    ...(Object.keys(Actions).filter((c)=>Actions[c].isBuyable))\n    */\n  ].sort(),\n  deck: [\n    /*\n    // Turn 2. Will require some sacrifice.\n    \"Card02\", \"Card01\",\n    // Turn 1.\n    \"Card02\", \"Card02\", \"Card01\",\n    */\n  ],\n  hand: [],\n  discard: [],\n  growthMindsetPoints: 1,\n  cardsLeftToDiscard: 0,\n  cardsLeftToForget: 0,\n  statuses: {},\n  currentEvent: null,\n  backgroundImage: null,\n  schedule: INITIAL_SCHEDULE,\n};\n\nconst STARTS_TURN_WITH = {\n  money: 0,\n  attention: 1,\n  energy: 1,\n};\n\nfunction SetupNewTurn(G, ctx) {\n  // First process any events.\n  const schedule = new Schedule(G.schedule);\n  const events = schedule.getEvents(ctx.turn);\n  events.forEach((eventId) => {\n    Events[eventId].apply(G, ctx);\n    G.currentEvent = eventId;\n  });\n  if (events.length === 0) {\n    // Don't bother with the Events UI if there's no events.\n    ctx.events.endStage();\n  }\n  // Discard the remainder of your hand.\n  while (G.hand.length > 0) {\n    let remainingCard = G.hand.pop();\n    if (!Actions[remainingCard].forgetsOnDiscard) {\n      // You only get one chance to play certain kinds of cards.\n      G.discard.push(remainingCard);\n    }\n  }\n  const cardsToDraw = Math.min(5, G.growthMindsetPoints);\n  for (let i = 0; i < cardsToDraw; i++) {\n    DrawCard(G, ctx);\n  }\n  Object.assign(G, STARTS_TURN_WITH);\n  G.growthMindsetPoints--;\n\n  // Apply status effects last.\n  for (let [stat, dur] of Object.entries(G.statuses)) {\n    console.log(stat, dur);\n    if (dur > 0) {\n      Statuses[stat].apply(G, ctx);\n      G.statuses[stat]--;\n    } else {\n      delete G.statuses[stat];\n    }\n  }\n}\n\nexport const Apex2021 = {\n  setup: (ctx, setupData) => ({\n    ...INITIAL_BOARD,\n    ...STARTS_TURN_WITH\n  }),\n  moves: {\n    performAction: (G, ctx, handIndex) => {\n      const actionId = G.hand[handIndex];\n      const action = Actions[actionId];\n      if (!action.perform(G, ctx)) {\n        return INVALID_MOVE;\n      }\n      G.hand.splice(handIndex, 1);\n      if (!action.forgetsSelf) {\n        G.discard.push(actionId);\n      }\n    },\n    buyAction: (G, ctx, shopIndex) => {\n      const actionId = G.actionShop[shopIndex];\n      const action = Actions[actionId];\n      if (!action.buy(G, ctx)) {\n        return INVALID_MOVE;\n      }\n      G.actionShop.splice(shopIndex, 1);\n    },\n    endTurn: (G, ctx) => {\n      ctx.events.endTurn();\n    },\n  },\n  turn: {\n    activePlayers: { all: \"showEvent\" },\n    onBegin: (G, ctx) => ( SetupNewTurn(G, ctx) ),\n    onEnd: (G, ctx) => {\n      if (G.growthMindsetPoints <= 0) {\n         ctx.events.endGame(\"fixed-mindset\");\n      }\n      //return G;\n    },\n    stages: {\n      showEvent: {\n        moves: {\n          chooseOption: (G, ctx, optionIndex) => {\n            // TBD: Events don't have any choices yet.\n          },\n          dismiss: (G, ctx) => {\n            G.backgroundImage = Events[G.currentEvent].image;\n            G.currentEvent = null;\n            ctx.events.endStage();\n          },\n        },\n      },\n      discard: {\n        moves: {\n          discardAction: (G, ctx, handIndex) => {\n            console.log(G.cardsLeftToDiscard);\n            const actionId = G.hand[handIndex];\n            G.hand.splice(handIndex, 1);\n            G.discard.push(actionId);\n            if (G.hand.length === 0) {\n              G.cardsLeftToDiscard = 0;\n            } else {\n              G.cardsLeftToDiscard--;\n            }\n            if (G.cardsLeftToDiscard <= 0) {\n              ctx.events.endStage();\n            }\n          }\n        }\n      },\n      forget: {\n        moves: {\n          forgetAction: (G, ctx, handIndex) => {\n            console.log(G.cardsLeftToForget);\n            G.hand.splice(handIndex, 1);\n            if (G.hand.length === 0) {\n              G.cardsLeftToForget = 0;\n            } else {\n              G.cardsLeftToForget--;\n            }\n            if (G.cardsLeftToForget <= 0) {\n              ctx.events.endStage();\n            }\n          }\n        }\n      }\n    }\n  },\n};\n","import React from 'react';\n\nconst GameContext = React.createContext({});\n\nexport default GameContext;\n","import React, {\n  useContext,\n} from \"react\";\n\nimport {\n  Badge,\n  ProgressBar,\n  Table,\n} from \"react-bootstrap\";\n\nimport { MAX_GROWTH_MINDSET } from \"../Constants\";\nimport GameContext from \"../GameContext\";\n\nconst GROWTH_MINDSET_COLOR = {\n  0: \"danger\",\n  1: \"danger\",\n  2: \"danger\",\n  3: \"warning\",\n  4: \"success\",\n  5: \"info\",\n};\n\n\nfunction GameInfo() {\n  const {\n    G,\n    ctx,\n    moves,\n  } = useContext(GameContext);\n  const {\n    growthMindsetPoints,\n    money,\n    attention,\n    energy\n  } = G;\n  return (\n    <Table responsive bordered id=\"player-info\">\n      <thead>\n        <tr className=\"info-label-row\">\n          <th>Day #</th>\n          <th>Growth Mindset</th>\n          <th>Money</th>\n          <th>Attention</th>\n          <th>Energy</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr className=\"info-data-row\">\n          <td><Badge variant=\"dark\">{ctx.turn}</Badge></td>\n          <td>\n            <ProgressBar\n              now={(growthMindsetPoints * 100.0 /MAX_GROWTH_MINDSET).toPrecision(3)}\n              label={growthMindsetPoints}\n              variant={GROWTH_MINDSET_COLOR[growthMindsetPoints]}\n              animated={growthMindsetPoints === MAX_GROWTH_MINDSET}\n            />\n          </td>\n          <td><Badge variant=\"warning\">{money}</Badge></td>\n          <td><Badge variant=\"primary\">{attention}</Badge></td>\n          <td><Badge variant=\"success\">{energy}</Badge></td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n}\n\nexport default GameInfo;\n","import React, {\n  useEffect,\n} from \"react\";\n\nimport {\n  OverlayTrigger,\n  Tooltip,\n} from \"react-bootstrap\";\n\nimport Actions from \"../Action\";\n\nfunction CardOrCards(number) {\n  return \"\" + number + \" \" + (number > 1 ? \"cards\" : \"card\");\n}\n\nexport const Description = (props) => {\n  const { description, runEffect, className, passthrough } = props;\n  useEffect(\n    () => {\n      if (runEffect) {\n        runEffect();\n      }\n    }\n  );\n  return (\n    <Tooltip id=\"keyword-description\" className={className} {...passthrough}>\n      {description}\n    </Tooltip>\n  );\n};\n\nexport const Keyword = (props) => {\n  const { value, description, tooltipClassName, runEffect } = props;\n  const renderDescription = (descriptionProps) => (\n    <Description\n      description={description}\n      className={tooltipClassName}\n      runEffect={runEffect}\n      passthrough={descriptionProps}\n    />\n  );\n  return (\n    <OverlayTrigger\n      placement=\"right\"\n      overlay={renderDescription}\n    >\n      <span className=\"card-keyword\">{value}</span>\n    </OverlayTrigger>\n  );\n};\n\nexport const Discard = (props) => {\n  const { number } = props;\n  return (\n    <Keyword\n      value={\"Discard \" + number}\n      description={\"Place cards from your hand into your discard pile until you have placed \" + CardOrCards(number) + \" or your hand is empty.\"}\n    />\n  );\n};\n\nexport const Draw = (props) => {\n  const { number } = props;\n  return (\n    <Keyword\n      value={\"Draw \" + number}\n      description={\"Place \" + CardOrCards(number) + \" from your deck into your hand. If your deck is empty, your discard pile will automatically be shuffled into your deck.\"}\n    />\n  );\n};\n\nexport const Forget = (props) => {\n  const { number } = props;\n  return (\n    <Keyword\n      value={\"Forget \" + number}\n      description={\"Permanently remove cards from your hand until you have removed \" + CardOrCards(number) + \" or your hand is empty.\"}\n    />\n  );\n};\n\nexport const ForgetSelf = () => {\n  return (\n    <Keyword\n      value={\"Forget Self\"}\n      description={\"Permanently remove this card from your hand upon being played.\"}\n    />\n  );\n};\n\nexport const Gain = (props) => {\n  const { cardId, renderCard, tooltipClassName, runEffect } = props;\n  const card = renderCard({\n    cardId: cardId,\n    onClick: s=>{}\n  });\n  return (\n    <Keyword\n      value={\"Gain \" + Actions[cardId].displayName}\n      description={card}\n      tooltipClassName={tooltipClassName}\n      runEffect={runEffect}\n    />\n  );\n};\n\nexport const BoostGrowthMindset = (props) => {\n  const { number } = props;\n  return (\n    <Keyword\n      value={\"+\" + number + \" Growth Mindset\"}\n      description={\"Growth Mindset represents the number of cards you can draw at the beginning of the next turn. You lose one point per turn, and Growth Mindset is capped at 5.\"}\n    />\n  );\n};\n\nexport const YOLO = (props) => {\n  return (\n    <Keyword\n      value={\"#YOLO\"}\n      description={\"If this card remains in your hand at the end of the turn, it will be permanently removed from your deck.\"}\n    />\n  );\n};\n","import React, {\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\n\nimport {\n  Badge,\n  Button,\n  Container,\n  Col,\n  Card,\n  CardColumns,\n  ListGroup,\n  Row,\n  Tab,\n  Tabs,\n} from \"react-bootstrap\";\n\nimport { run as runHolder } from 'holderjs/holder';\nimport GameContext from \"../GameContext\";\nimport Actions from \"../Action\";\nimport {\n  BoostGrowthMindset,\n  Discard,\n  Draw,\n  Forget,\n  ForgetSelf,\n  Gain,\n  YOLO,\n} from \"./Keyword\";\n\nfunction ActionCard(props) {\n  const [isSelected, setIsSelected] = useState(false);\n  const { cardId, slotId, onClick, ref } = props;\n  const {\n    ctx,\n  } = useContext(GameContext);\n  const {\n    displayName,\n    image,\n    description,\n    moneyCost,\n    energyCost,\n    producesGrowthMindset,\n    producesMoney,\n    producesAttention,\n    producesEnergy,\n    drawsCards,\n    discardsCards,\n    gainsCards,\n    forgetsOnDiscard,\n    forgetsSelf,\n    forgetsCards,\n  } = Actions[cardId];\n  const isDiscard = ctx.activePlayers && ctx.activePlayers[ctx.playOrderPos] === \"discard\";\n  const isForget = ctx.activePlayers && ctx.activePlayers[ctx.playOrderPos] === \"forget\";\n  // Hack to render sized placeholder before we have assets.\n  useEffect(() => {\n    runHolder(\"card-image\");\n  });\n\n  return (\n    <Card\n      ref = {ref}\n      onClick={() => onClick(slotId)}\n      onMouseEnter={() => setIsSelected(true)}\n      onMouseLeave={() => setIsSelected(false)}\n      bg={isDiscard || isForget ? \"danger\" : null}\n      border={isSelected ? \"warning\" : \"secondary\"}\n    >\n      <Card.Header>\n        <Container fluid>\n          <Row>\n            <Col xs={4} className=\"cost-label\">\n                Makes:\n            </Col>\n            <Col xs={4}/>\n            <Col xs={1}>\n              <Badge variant=\"warning\">\n                {producesMoney}\n              </Badge>\n            </Col>\n            <Col xs={1}>\n              <Badge variant=\"primary\">\n                {producesAttention}\n              </Badge>\n            </Col>\n            <Col xs={1}>\n              <Badge variant=\"success\">\n                {producesEnergy}\n              </Badge>\n            </Col>\n          </Row>\n        </Container>\n      </Card.Header>\n      <Card.Body>\n        <Card.Title>{displayName}</Card.Title>\n        <Card.Img src={image != null ? image : \"holder.js/256x128\"} className=\"card-image\"/>\n        <ListGroup className=\"extra-rules\">\n          { \n            (producesGrowthMindset > 0) && (\n              <ListGroup.Item key=\"growth-mindset\"><BoostGrowthMindset number={producesGrowthMindset}/></ListGroup.Item>\n            )\n          }\n          { \n            (drawsCards > 0) && (\n              <ListGroup.Item key=\"draws-cards\"><Draw number={drawsCards}/></ListGroup.Item>\n            )\n          }\n          {\n            (discardsCards > 0) && (\n              <ListGroup.Item key=\"discards-cards\"><Discard number={discardsCards}/></ListGroup.Item>\n            )\n          }\n          {\n            (forgetsOnDiscard) && (\n              <ListGroup.Item key=\"forgets-on-discard\"><YOLO/></ListGroup.Item>\n            )\n          }\n          {\n            (forgetsSelf) && (\n              <ListGroup.Item key=\"forgets-self\"><ForgetSelf/></ListGroup.Item>\n            )\n          }\n          { \n            (forgetsCards > 0) && (\n              <ListGroup.Item key=\"forgets-cards\"><Forget number={forgetsCards}/></ListGroup.Item>\n            )\n          }\n          {\n            gainsCards.map((cardId) =>\n              <ListGroup.Item key={\"gains-\" + cardId}>\n                <Gain\n                  cardId={cardId}\n                  renderCard={ActionCard}\n                  tooltipClassName=\"card-preview\"\n                  runEffect={()=>runHolder(\"card-image\")}\n                />\n              </ListGroup.Item>\n            )\n          }\n        </ListGroup>\n        <Card.Text className=\"flavor\">\n          {description}\n        </Card.Text>\n      </Card.Body>\n      <Card.Footer>\n        <Container fluid>\n          <Row>\n            <Col xs={4} className=\"cost-label\">\n                Costs:\n            </Col>\n            <Col xs={4}/>\n            <Col xs={1}>\n              <Badge variant=\"warning\">\n                {moneyCost}\n              </Badge>\n            </Col>\n            <Col xs={1}/>\n            <Col xs={1}>\n              <Badge variant=\"success\">\n                {energyCost}\n              </Badge>\n            </Col>\n          </Row>\n        </Container>\n      </Card.Footer>\n    </Card>\n  );\n}\n\nfunction ActionList(props) {\n  const { actions, className, onClick } = props;\n  const actionCards = actions.map((actionId, slotId) => (\n    <ActionCard cardId={actionId} slotId={slotId} key={slotId} onClick={onClick} />\n  ));\n  return (\n    <CardColumns className={\"action-list-\" + className}>\n      {actionCards.length > 0 ? actionCards :\n        <Badge><h1>No Actions Available</h1></Badge>}\n    </CardColumns>\n  );\n}\n\nfunction ActionArea() {\n  const {\n    G,\n    ctx,\n    moves,\n  } = useContext(GameContext);\n  const {\n    hand,\n    actionShop,\n    deck,\n    discard,\n  } = G;\n  const noop = (x) => {};\n  const isDiscard = ctx.activePlayers && ctx.activePlayers[ctx.playOrderPos] === \"discard\";\n  const isForget = ctx.activePlayers && ctx.activePlayers[ctx.playOrderPos] === \"forget\";\n  const actionData = {\n    \"Hand\": {\n      actions: hand,\n      onClick: isDiscard ? moves.discardAction: isForget ? moves.forgetAction : moves.performAction\n    },\n    \"Shop\": {\n      actions: actionShop,\n      onClick: isDiscard ? noop : moves.buyAction\n    },\n    \"Deck\": {\n      actions: [...deck].sort(), // Hide the order of the cards.\n      onClick: noop\n    },\n    \"Discard Pile\": {\n      actions: discard,\n      onClick: noop\n    },\n  };\n  const [tab, setTab] = useState(\"Hand\");\n  const tabs = Object.keys(actionData).map((areaType) => (\n    <Tab eventKey={areaType} title={areaType} key={areaType}>\n      <ActionList actions={actionData[areaType].actions} onClick={actionData[areaType].onClick} className={areaType}/>\n    </Tab>\n  ));\n  return <Tabs id=\"actions\" activeKey={tab} onSelect={(k)=>setTab(k)}>\n    {tabs}\n    <Tab eventKey=\"next-turn\" title=\"Next Turn\" key=\"next-turn\">\n      <Button\n        onClick={() => {\n          moves.endTurn();\n          setTab(\"Hand\");\n        }}\n        className=\"confirm-next-turn\"\n      >\n        Confirm End Turn\n      </Button>\n    </Tab>\n  </Tabs>\n}\n\nexport default ActionArea;\n","import React, {\n  useContext,\n  useEffect,\n  useReducer,\n  useState,\n} from \"react\";\n\nimport {\n  Button,\n  Container,\n  Col,\n  Modal,\n  Row,\n  ProgressBar,\n} from \"react-bootstrap\";\n\nimport GameContext from \"../GameContext\";\nimport GameInfo from \"./GameInfo\";\nimport ActionArea from \"./ActionArea\";\n\nimport Actions from \"../Action\";\nimport Events from \"../Event\";\n\nfunction EventModal(props) {\n  const {\n    G,\n    moves,\n  } = useContext(GameContext);\n  console.log(moves);\n  const show = G.currentEvent in Events;\n  if (!show) {\n    return <></>;\n  }\n  const onHide = () => moves.dismiss();\n  const ev = Events[G.currentEvent];\n  const {\n    displayName,\n    description,\n    image,\n  } = ev;\n  const styles = {\n    backgroundImage: image == null ? null : `url(${image})`,\n    backgroundRepeat: \"no-repeat\",\n    backgroundSize: \"100% 100%\",\n  };\n  return (\n    <Modal\n      size = \"lg\"\n      show = {show}\n      onHide = {onHide}\n      style = {styles} \n      className = \"event-modal\"\n      centered\n    >\n      <Modal.Header>\n        <Modal.Title>\n          {displayName}\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        {description}\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onHide}>Continue</Button>\n      </Modal.Footer>\n    </Modal>\n  ); \n}\n\nconst Assets = function() {\n  const assets = {}; \n  for (let action of Object.values(Actions)) {\n    if (action.image !== null) {\n      assets[action.image] = \"img\";\n    }\n  }\n  for (let ev of Object.values(Events)) {\n    if (ev.image !== null) {\n      assets[ev.image] = \"img\";\n    }\n  }\n  return assets;\n}\n\nconst Loading = function(props) {\n  const {\n    count,\n    total,\n    percent,\n    startGame\n  } = props;\n  return (\n    <div id=\"loading\">\n      <ProgressBar now={percent}/>\n      <hr/>\n      <p>\n        {\n          count < total ? (\n            `Loaded ${count}/${total} assets...`\n          ) : (\n            <Button onClick={startGame}>New Game</Button>\n          )\n        }\n      </p>\n    </div>\n  )\n};\n\nconst Board = function(props) {\n  // Pattern ripped from\n  // https://jack72828383883.medium.com/ff1642708240\n  const [isLoading, setIsLoading] = useState(true);\n  const assetsToLoad = Assets();\n\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case \"increment\":\n        return {\n          count: state.count + 1,\n          total: state.total,\n          percent: (100.0 * (state.count + 1) / state.total)\n        };\n      default:\n        throw new Error(`Unsupported action type ${action.type}`);\n    }\n  };\n  const [loadingState, dispatch] = useReducer(reducer, {\n    count: 0,\n    total: Object.keys(assetsToLoad).length,\n    percent: 0,\n  });\n  const preload = async (assets: object) => {\n    const promises = await Object.keys(assets).map((src) => {\n      return new Promise(function (resolve, reject) {\n        const assetType = assets[src];\n        if (assetType === \"img\") {\n          const img =  new Image();\n          img.src = src;\n          img.onload = () => {\n            // Incrementally update progress bar.\n            dispatch({type: \"increment\"});\n            resolve()\n          };\n          img.onerror = reject();\n        }\n      });\n    });\n    await Promise.all(promises);\n  };\n  useEffect(() => {\n    preload(assetsToLoad);\n  }, [assetsToLoad]);\n  const {\n    G,\n    ctx,\n    moves,\n  } = props;\n  const {\n    backgroundImage\n  } = G;\n  const styles = {\n    backgroundImage: backgroundImage == null ? null : `url(${backgroundImage})`,\n    backgroundSize: \"cover\",\n  };\n  if (isLoading) {\n    // TODO: In theory we should introduce an intermediate \"loaded-but-not-started\" state.\n    return <Loading startGame={() => setIsLoading(false)} {...loadingState} />;\n  }\n  // Game has started.\n  return (\n    <GameContext.Provider value={{\n      G: G,\n      ctx: ctx,\n      moves: moves\n    }}>\n      <div style={styles} id=\"bg-container\"/>\n      <div id=\"game-wrapper\">\n        <Container fluid id=\"game-container\">\n          <Row>\n            <Col>\n              <GameInfo/> \n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <ActionArea/>\n            </Col>\n          </Row>\n        </Container>\n        <EventModal/>\n      </div>\n    </GameContext.Provider>\n  );\n}\n\nexport default Board;\n","import { Client } from 'boardgame.io/react';\nimport { STATIC_ROOT } from './Constants';\nimport { Apex2021 } from './Game';\nimport Board from './component/Board';\nimport {\n  Redirect,\n  Route,\n  Switch,\n} from 'react-router-dom';\n\n\nconst GameClient = Client({\n  game: Apex2021,\n  board: Board,\n  numPlayers: 1,\n});\n\nconst Editor = function(props) {\n  return (\n    <h1>Editor</h1>\n  )\n};\n\n//        <Route exact path={`${STATIC_ROOT}editor/`} component={Editor} />\n\nconst App = function(props) {\n  return (\n    <Switch>\n      <Route exact strict path=\"/apex2021\" component={GameClient}/>\n    </Switch>\n  );\n};\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}