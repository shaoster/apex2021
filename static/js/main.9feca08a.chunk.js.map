{"version":3,"sources":["actions sync nonrecursive /Action/.js$","GameContext.js","component/GameInfo.jsx","component/ActionArea.jsx","component/Board.jsx","App.js","reportWebVitals.js","index.js","actions/Base.js","actions/Phase1Action.js","Game.js","Action.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","GameContext","React","createContext","GROWTH_MINDSET_COLOR","0","1","2","3","4","5","GameInfo","useContext","G","ctx","growthMindsetPoints","moves","money","attention","energy","Table","responsive","bordered","className","Badge","variant","turn","ProgressBar","now","MAX_GROWTH_MINDSET","toPrecision","label","animated","CardReference","forwardRef","props","ref","cardId","slotId","OverlayTrigger","placement","overlay","cardPreviewProps","Tooltip","ActionCard","onClick","s","Actions","displayName","useState","isSelected","setIsSelected","image","description","moneyCost","energyCost","producesGrowthMindset","producesMoney","producesAttention","producesEnergy","drawsCards","discardsCards","gainsCards","forgetsSelf","forgetsCards","isDiscard","activePlayers","playOrderPos","isForget","Card","onMouseEnter","onMouseLeave","bg","border","Header","Container","fluid","Row","Col","xs","Body","Title","Image","src","rounded","width","height","ListGroup","Item","Text","Footer","ActionList","actions","actionCards","actionId","CardColumns","length","ActionArea","hand","actionShop","deck","discard","noop","x","actionData","discardAction","forgetAction","performAction","buyAction","sort","tab","setTab","tabs","areaType","Tab","eventKey","title","Tabs","activeKey","onSelect","k","Button","endTurn","Board","Provider","value","App","Client","game","Apex2021","board","numPlayers","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","BaseAction","isBuyable","perform","Math","min","this","i","DrawCard","cardsLeftToDiscard","events","setStage","cardsLeftToForget","forEach","c","push","buy","INITIAL_BOARD","Array","fill","filter","STARTS_TURN_WITH","pop","setup","setupData","handIndex","action","INVALID_MOVE","splice","shopIndex","console","log","onBegin","cardsToDraw","assign","SetupNewTurn","onEnd","endGame","stages","endStage","forget","importAll","r","allActions","flatMap","key","default","result","require"],"mappings":"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","file":"static/js/main.9feca08a.chunk.js","sourcesContent":["var map = {\n\t\"./Phase1Action.js\": 284\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 173;","import React from 'react';\n\nconst GameContext = React.createContext({});\n\nexport default GameContext;\n","import React, {\n  useContext,\n} from \"react\";\n\nimport {\n  Badge,\n  ProgressBar,\n  Table,\n} from \"react-bootstrap\";\n\nimport { MAX_GROWTH_MINDSET } from \"../Game\";\nimport GameContext from \"../GameContext\";\n\nconst GROWTH_MINDSET_COLOR = {\n  0: \"danger\",\n  1: \"danger\",\n  2: \"danger\",\n  3: \"warning\",\n  4: \"success\",\n  5: \"info\",\n};\n\n\nfunction GameInfo() {\n  const {\n    G,\n    ctx,\n    moves,\n  } = useContext(GameContext);\n  const {\n    growthMindsetPoints,\n    money,\n    attention,\n    energy\n  } = G;\n  return (\n    <Table responsive bordered id=\"player-info\">\n      <thead>\n        <tr className=\"info-label-row\">\n          <th>Day #</th>\n          <th>Growth Mindset</th>\n          <th>Money</th>\n          <th>Attention</th>\n          <th>Energy</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr className=\"info-data-row\">\n          <td><Badge variant=\"dark\">{ctx.turn}</Badge></td>\n          <td>\n            <ProgressBar\n              now={(growthMindsetPoints * 100.0 /MAX_GROWTH_MINDSET).toPrecision(3)}\n              label={growthMindsetPoints}\n              variant={GROWTH_MINDSET_COLOR[growthMindsetPoints]}\n              animated={growthMindsetPoints === MAX_GROWTH_MINDSET}\n            />\n          </td>\n          <td><Badge variant=\"warning\">{money}</Badge></td>\n          <td><Badge variant=\"primary\">{attention}</Badge></td>\n          <td><Badge variant=\"success\">{energy}</Badge></td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n}\n\nexport default GameInfo;\n","import React, {\n  useContext,\n  useState,\n} from \"react\";\n\nimport {\n  Badge,\n  Button,\n  Container,\n  Col,\n  Card,\n  CardColumns,\n  Image,\n  ListGroup,\n  OverlayTrigger,\n  Row,\n  Tab,\n  Tabs,\n  Tooltip\n} from \"react-bootstrap\";\n\nimport Holder from \"react-holder\";\nimport GameContext from \"../GameContext\";\nimport Actions from \"../Action\";\n\nconst CardReference = React.forwardRef((props, ref) => {\n  const { cardId, slotId } = props;\n  const cardPreview = (cardPreviewProps) => (\n    <Tooltip id=\"card-preview\" {...cardPreviewProps}>\n      <ActionCard cardId={cardId} onClick={s=>{}}/>\n    </Tooltip>\n  );\n  return (\n    <OverlayTrigger\n      id={\"trigger-\" + slotId}\n      placement=\"right\"\n      overlay={cardPreview}\n    >\n      <span className=\"card-reference\" ref={ref}>{Actions[cardId].displayName}</span>\n    </OverlayTrigger>\n  );\n});\n\nfunction ActionCard(props) {\n  const [isSelected, setIsSelected] = useState(false);\n  const { cardId, slotId, onClick, ref } = props;\n  const {\n    ctx,\n  } = useContext(GameContext);\n  const {\n    displayName,\n    image,\n    description,\n    moneyCost,\n    energyCost,\n    producesGrowthMindset,\n    producesMoney,\n    producesAttention,\n    producesEnergy,\n    drawsCards,\n    discardsCards,\n    gainsCards,\n    forgetsSelf,\n    forgetsCards,\n  } = Actions[cardId];\n  const isDiscard = ctx.activePlayers && ctx.activePlayers[ctx.playOrderPos] === \"discard\";\n  const isForget = ctx.activePlayers && ctx.activePlayers[ctx.playOrderPos] === \"forget\";\n  return (\n    <Card\n      ref = {ref}\n      onClick={() => onClick(slotId)}\n      onMouseEnter={() => setIsSelected(true)}\n      onMouseLeave={() => setIsSelected(false)}\n      bg={isDiscard || isForget ? \"danger\" : null}\n      border={isSelected ? \"warning\" : \"secondary\"}\n    >\n      <Card.Header>\n        <Container fluid>\n          <Row>\n            <Col xs={4} className=\"cost-label\">\n                Makes:\n            </Col>\n            <Col xs={4}/>\n            <Col xs={1}>\n              <Badge variant=\"warning\">\n                {producesMoney}\n              </Badge>\n            </Col>\n            <Col xs={1}>\n              <Badge variant=\"primary\">\n                {producesAttention}\n              </Badge>\n            </Col>\n            <Col xs={1}>\n              <Badge variant=\"success\">\n                {producesEnergy}\n              </Badge>\n            </Col>\n          </Row>\n        </Container>\n      </Card.Header>\n      <Card.Body>\n        <Card.Title>{displayName}</Card.Title>\n        {\n          image != null ?\n          <Image src={image} rounded className=\"card-image\"/> : \n          <Holder width=\"256px\" height=\"128px\" className=\"card-image\"/>\n        }\n        <ListGroup className=\"extra-rules\">\n          { \n            (producesGrowthMindset > 0) && (\n              <ListGroup.Item>+{producesGrowthMindset} <b>Growth Mindset</b></ListGroup.Item>\n            )\n          }\n          { \n            (drawsCards > 0) && (\n              <ListGroup.Item><b>Draw</b> {drawsCards}</ListGroup.Item>\n            )\n          }\n          {\n            (discardsCards > 0) && (\n              <ListGroup.Item><b>Discard</b> {discardsCards}</ListGroup.Item>\n            )\n          }\n          {\n            (forgetsSelf) && (\n              <ListGroup.Item><b>Forget</b> <em>Self</em></ListGroup.Item>\n            )\n          }\n          { \n            (forgetsCards > 0) && (\n              <ListGroup.Item><b>Forget</b> {forgetsCards}</ListGroup.Item>\n            )\n          }\n          {\n            gainsCards.map((cardId) => <ListGroup.Item>\n                Gain <CardReference cardId={cardId} slotId={slotId}/>\n              </ListGroup.Item>\n            )\n          }\n        </ListGroup>\n        <Card.Text className=\"flavor\">\n          {description}\n        </Card.Text>\n      </Card.Body>\n      <Card.Footer>\n        <Container fluid>\n          <Row>\n            <Col xs={4} className=\"cost-label\">\n                Costs:\n            </Col>\n            <Col xs={4}/>\n            <Col xs={1}>\n              <Badge variant=\"warning\">\n                {moneyCost}\n              </Badge>\n            </Col>\n            <Col xs={1}/>\n            <Col xs={1}>\n              <Badge variant=\"success\">\n                {energyCost}\n              </Badge>\n            </Col>\n          </Row>\n        </Container>\n      </Card.Footer>\n    </Card>\n  );\n}\n\nfunction ActionList(props) {\n  const { actions, className, onClick } = props;\n  const actionCards = actions.map((actionId, slotId) => (\n    <ActionCard cardId={actionId} slotId={slotId} key={slotId} onClick={onClick} />\n  ));\n  return (\n    <CardColumns className={\"action-list-\" + className}>\n      {actionCards.length > 0 ? actionCards :\n        <Badge><h1>No Actions Available</h1></Badge>}\n    </CardColumns>\n  );\n}\n\nfunction ActionArea() {\n  const {\n    G,\n    ctx,\n    moves,\n  } = useContext(GameContext);\n  const {\n    hand,\n    actionShop,\n    deck,\n    discard,\n  } = G;\n  const noop = (x) => {};\n  const isDiscard = ctx.activePlayers && ctx.activePlayers[ctx.playOrderPos] === \"discard\";\n  const isForget = ctx.activePlayers && ctx.activePlayers[ctx.playOrderPos] === \"forget\";\n  const actionData = {\n    \"Hand\": {\n      actions: hand,\n      onClick: isDiscard ? moves.discardAction: isForget ? moves.forgetAction : moves.performAction\n    },\n    \"Shop\": {\n      actions: actionShop,\n      onClick: isDiscard ? noop : moves.buyAction\n    },\n    \"Deck\": {\n      actions: [...deck].sort(), // Hide the order of the cards.\n      onClick: noop\n    },\n    \"Discard Pile\": {\n      actions: discard,\n      onClick: noop\n    },\n  };\n  const [tab, setTab] = useState(\"Hand\");\n  const tabs = Object.keys(actionData).map((areaType) => (\n    <Tab eventKey={areaType} title={areaType} key={areaType}>\n      <ActionList actions={actionData[areaType].actions} onClick={actionData[areaType].onClick} className={areaType}/>\n    </Tab>\n  ));\n  return <Tabs id=\"actions\" activeKey={tab} onSelect={(k)=>setTab(k)}>\n    {tabs}\n    <Tab eventKey=\"next-turn\" title=\"Next Turn\" key=\"next-turn\">\n      <Button\n        onClick={() => {\n          moves.endTurn();\n          setTab(\"Hand\");\n        }}\n        className=\"confirm-next-turn\"\n      >\n        Confirm End Turn\n      </Button>\n    </Tab>\n  </Tabs>\n}\n\nexport default ActionArea;\n","import React from \"react\";\n\nimport {\n  Container,\n  Row,\n  Col\n} from \"react-bootstrap\";\n\nimport GameContext from \"../GameContext\";\nimport GameInfo from \"./GameInfo\";\nimport ActionArea from \"./ActionArea\";\n\nfunction Board(props) {\n  const {\n    G,\n    ctx,\n    moves,\n  } = props;\n  return (\n    <GameContext.Provider value={{\n      G: G,\n      ctx: ctx,\n      moves: moves\n    }}>\n      <Container fluid>\n        <Row>\n          <Col>\n            <GameInfo/> \n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <ActionArea/>\n          </Col>\n        </Row>\n      </Container>\n    </GameContext.Provider>\n  );\n}\n\nexport default Board;\n","import { Client } from 'boardgame.io/react';\nimport { Apex2021 } from './Game';\nimport Board from './component/Board';\n\n\nconst App = Client({\n  game: Apex2021,\n  board: Board,\n  numPlayers: 1,\n});\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { DrawCard, MAX_GROWTH_MINDSET } from '../Game';\n\nconst BaseAction = {\n  displayName: null,\n  image: null,\n  description: \"<FLAVOR>\",\n  moneyCost: 0,\n  energyCost: 0,\n  producesGrowthMindset: 0,\n  producesMoney: 0,\n  producesAttention: 0,\n  producesEnergy: 0,\n  drawsCards: 0,\n  discardsCards: 0,\n  gainsCards: [],\n  forgetsSelf: false,\n  forgetsCards: 0,\n  isBuyable: true,\n  // TODO: This is \"inheritance\" without any protection. Bad idea.\n  perform: function(G, ctx) {\n    // First check if we can afford the move.\n    if (G.energy <= 0) {\n      return false;\n    }\n    // Pay for the action.\n    G.energy--;\n    G.growthMindsetPoints = Math.min(MAX_GROWTH_MINDSET, G.growthMindsetPoints + this.producesGrowthMindset);\n    G.money += this.producesMoney;\n    G.attention += this.producesAttention;\n    G.energy += this.producesEnergy;\n    for (let i = 0; i < this.drawsCards; i++) {\n      DrawCard(G, ctx);\n    }\n    if (this.discardsCards > 0 && G.hand.length > 0) {\n      G.cardsLeftToDiscard = this.discardsCards;\n      ctx.events.setStage('discard');\n    }\n    if (this.forgetsCards > 0 && G.hand.length > 0) {\n      G.cardsLeftToForget = this.forgetsCards;\n      ctx.events.setStage('forget');\n    }\n    this.gainsCards.forEach((c) => G.discard.push(c));\n    return true;\n  },\n  buy: function(G, ctx) {\n    if (G.attention <= 0 || G.money < this.moneyCost || G.energy < this.energyCost) {\n      return false;\n    }\n    // Pay for the action.\n    G.attention--;\n    G.money -= this.moneyCost;\n    G.energy -= this.energyCost;\n    G.discard.push(this.id);\n    return true;\n  },\n};\n\nexport default BaseAction;\n","import BaseAction from './Base';\n\nexport default [\n  {\n    id: \"Card01\",\n    displayName: \"Card1\",\n    description: \"Make sure to play this every turn!\",\n    producesGrowthMindset: 1,\n    isBuyable: false,\n  },\n  {\n    id: \"Card02\",\n    displayName: \"Card2\",\n    description: \"Getting money lets you buy stuff.\",\n    producesMoney: 1,\n    producesEnergy: 1,\n  },\n  {\n    id: \"Card03\",\n    displayName: \"Card3\",\n    description: \"Sometimes you just want to forget everything.\",\n    moneyCost: 2,\n    forgetsSelf: true,\n    forgetsCards: 99,\n  },\n  {\n    id: \"Card04\",\n    displayName: \"Card4\",\n    description: \"If you play this, you'll have to pick another card in your hand to discard.\",\n    moneyCost: 2,\n    drawsCards: 3,\n    discardsCards: 1,\n  },\n  {\n    id: \"Card05\",\n    displayName: \"Card5\",\n    description: \"Doing too much can make you tired.\",\n    moneyCost: 2,\n    producesGrowthMindset: 1,\n    producesMoney: 1,\n    producesEnergy: 1,\n    drawsCards: 1,\n    gainsCards: [\"fatigue\"],\n  },\n  {\n    id: \"Card06\",\n    displayName: \"Card6\",\n    description: \"More energy means you can play more actions!\",\n    moneyCost: 3,\n    producesEnergy: 2,\n    drawsCards: 1,\n  },\n  {\n    id: \"Card07\",\n    displayName: \"Card7\",\n    description: \"IDK\",\n    moneyCost: 3,\n  },\n  {\n    id: \"Card08\",\n    displayName: \"Card8\",\n    description: \"IDK\",\n    moneyCost: 4,\n  },\n  {\n    id: \"Card09\",\n    displayName: \"Card9\",\n    description: \"More money\",\n    moneyCost: 4,\n    producesMoney: 2,\n    producesEnergy: 1,\n  },\n  {\n    id: \"Card10\",\n    displayName: \"Card10\",\n    description: \"That's a lot of energy.\",\n    moneyCost: 4,\n    producesAttention: 1,\n    producesEnergy: 4,\n  },\n  {\n    id: \"Card11\",\n    displayName: \"Card11\",\n    description: \"Maybe there are better options.\",\n    moneyCost: 5,\n    producesEnergy: 1,\n    drawsCards: 2,\n  },\n  {\n    id: \"Card12\",\n    displayName: \"Card12\",\n    description: \"More more money\",\n    moneyCost: 6,\n    producesMoney: 3,\n    producesEnergy: 1,\n  },\n  {\n    id: \"fatigue\",\n    displayName: \"Fatigue\",\n    description: \"Better rest up or I'll just get even more tired later.\",\n    isBuyable: false,\n    forgetsSelf: true,\n  }\n\n].map(c => ({\n  ...BaseAction,\n  ...c,\n}));\n","import { INVALID_MOVE } from 'boardgame.io/core';\n\nimport Actions from './Action';\n\nexport const MAX_HAND_SIZE = 8;\nexport const MAX_GROWTH_MINDSET = 5;\nconst INITIAL_BOARD = {\n  actionShop: [\n    ...Array(2).fill(\"Card02\"),\n    ...Array(1).fill(\"Card06\"),\n    ...Array(2).fill(\"Card09\"),\n    ...Array(1).fill(\"Card10\"),\n    ...Array(1).fill(\"Card12\"),\n    ...(Object.keys(Actions).filter((c)=>Actions[c].isBuyable))\n  ].sort(),\n  deck: [\n    // Turn 2. Will require some sacrifice.\n    \"Card02\", \"Card01\",\n    // Turn 1.\n    \"Card02\", \"Card02\", \"Card01\",\n  ],\n  hand: [],\n  discard: [],\n  growthMindsetPoints: 3,\n  cardsLeftToDiscard: 0,\n  cardsLeftToForget: 0,\n};\nconst STARTS_TURN_WITH = {\n  money: 0,\n  attention: 1,\n  energy: 1,\n};\n\n\nexport function DrawCard(G, ctx) {\n  if (G.hand.length >= MAX_HAND_SIZE) {\n    return false;\n  }\n  if (G.deck.length <= 0) {\n    while (G.discard.length > 0) {\n      G.deck.push(G.discard.pop());\n    }\n  }\n  // If the deck is still empty, no draw.\n  if (G.deck.length <= 0) {\n    return false;\n  }\n  G.hand.push(G.deck.pop());\n  return true;\n}\n\nfunction SetupNewTurn(G, ctx) {\n  console.log([...G.discard]);\n  // Discard the remainder of your hand.\n  while (G.hand.length > 0) {\n    G.discard.push(G.hand.pop());\n  }\n  console.log([...G.discard]);\n  const cardsToDraw = Math.min(5, G.growthMindsetPoints);\n  for (let i = 0; i < cardsToDraw; i++) {\n    DrawCard(G, ctx);\n  }\n  Object.assign(G, STARTS_TURN_WITH);\n  G.growthMindsetPoints--;\n}\n\nexport const Apex2021 = {\n  setup: (ctx, setupData) => ({\n    ...INITIAL_BOARD,\n    ...STARTS_TURN_WITH\n  }),\n  moves: {\n    performAction: (G, ctx, handIndex) => {\n      const actionId = G.hand[handIndex];\n      const action = Actions[actionId];\n      if (!action.perform(G, ctx)) {\n        return INVALID_MOVE;\n      }\n      G.hand.splice(handIndex, 1);\n      if (!action.forgetsSelf) {\n        G.discard.push(actionId);\n      }\n    },\n    buyAction: (G, ctx, shopIndex) => {\n      console.log(G.actionShop);\n      const actionId = G.actionShop[shopIndex];\n      const action = Actions[actionId];\n      if (!action.buy(G, ctx)) {\n        return INVALID_MOVE;\n      }\n      G.actionShop.splice(shopIndex, 1);\n    },\n    endTurn: (G, ctx) => {\n      ctx.events.endTurn();\n    },\n  },\n  turn: {\n    onBegin: (G, ctx) => ( SetupNewTurn(G, ctx) ),\n    onEnd: (G, ctx) => {\n      if (G.growthMindsetPoints <= 0) {\n         ctx.events.endGame(\"fixed-mindset\");\n      }\n      //return G;\n    },\n    stages: {\n      discard: {\n        moves: {\n          discardAction: (G, ctx, handIndex) => {\n            console.log(G.cardsLeftToDiscard);\n            const actionId = G.hand[handIndex];\n            G.hand.splice(handIndex, 1);\n            G.discard.push(actionId);\n            if (G.hand.length === 0) {\n              G.cardsLeftToDiscard = 0;\n            } else {\n              G.cardsLeftToDiscard--;\n            }\n            if (G.cardsLeftToDiscard <= 0) {\n              ctx.events.endStage();\n            }\n          }\n        }\n      },\n      forget: {\n        moves: {\n          forgetAction: (G, ctx, handIndex) => {\n            console.log(G.cardsLeftToForget);\n            const actionId = G.hand[handIndex];\n            G.hand.splice(handIndex, 1);\n            if (G.hand.length === 0) {\n              G.cardsLeftToForget = 0;\n            } else {\n              G.cardsLeftToForget--;\n            }\n            if (G.cardsLeftToForget <= 0) {\n              ctx.events.endStage();\n            }\n          }\n        }\n      }\n\n    }\n  },\n};\n","function importAll(r) {\n  const allActions = r.keys().flatMap(\n      (key) => r(key).default,\n  );\n  let result = {};\n  allActions.forEach((action) => {\n    result[action.id] = action;\n  });\n  return result;\n}\n\nexport default importAll(require.context('./actions/', false, /Action\\.js$/));\n"],"sourceRoot":""}